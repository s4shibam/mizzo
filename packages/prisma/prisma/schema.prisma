// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_DIRECT_URL")
}

model User {
  id                String                 @id @default(cuid())
  name              String
  email             String                 @unique
  password          String
  isAdmin           Boolean                @default(false)
  isArtist          Boolean                @default(false)
  isPremiumUser     Boolean                @default(false)
  isPublicProfile   Boolean                @default(false)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  likedPlaylists    LikedPlaylist[]        @relation("User_LikedPlaylists_O2M")
  likedTracks       LikedTrack[]           @relation("User_LikedTracks_O2M")
  ownedPlaylists    Playlist[]             @relation("User_OwnedPlaylists_O2M")
  primaryTracks     Track[]                @relation("User_PrimaryTracks_O2M")
  artistApplication UserArtistApplication? @relation("User_ArtistApplication_O2O")
  profile           UserProfile?           @relation("User_UserProfile_O2O")
  resetToken        UserResetToken?        @relation("User_UserResetToken_O2O")
  secondaryTracks   Track[]                @relation("Users_SecondaryTracks_M2M")
  notifications     Notification[]

  @@index([id])
  @@index([email])
  @@map("users")
}

model Track {
  id               String          @id @default(cuid())
  primaryArtistId  String
  title            String
  language         String
  isPublic         Boolean         @default(true)
  likes            Int             @default(0)
  listens          Int             @default(0)
  duration         Int
  status           Status          @default(PENDING)
  posterKey        String?
  trackKey         String?
  tags             String?
  lyrics           String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  likedTrack       LikedTrack[]    @relation("Track_LikedTracks_O2M")
  playlistTracks   PlaylistTrack[] @relation("Track_PlaylistTracks_O2M")
  primaryArtist    User            @relation("User_PrimaryTracks_O2M", fields: [primaryArtistId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  secondaryArtists User[]          @relation("Users_SecondaryTracks_M2M")

  @@unique([id, primaryArtistId])
  @@index([id])
  @@index([primaryArtistId])
  @@index([id, primaryArtistId])
  @@index([title])
  @@index([language])
  @@index([tags])
  @@map("tracks")
}

model Playlist {
  id             String          @id @default(cuid())
  ownerId        String
  name           String
  description    String?
  status         Status          @default(PUBLISHED)
  likes          Int             @default(0)
  isPublic       Boolean         @default(false)
  posterKey      String?
  tracksCount    Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  likedPlaylist  LikedPlaylist[] @relation("Playlist_LikedPlaylists_O2M")
  playlistTracks PlaylistTrack[] @relation("Playlist_PlaylistTracks_O2M")
  owner          User            @relation("User_OwnedPlaylists_O2M", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id, ownerId])
  @@index([id])
  @@index([ownerId])
  @@index([name])
  @@index([description])
  @@map("playlists")
}

model Otp {
  name      String
  email     String   @unique
  password  String
  otp       String
  createdAt DateTime @default(now())

  @@index([email])
  @@map("otps")
}

model UserProfile {
  userId    String  @unique
  avatarKey String?
  bio       String?
  facebook  String?
  twitter   String?
  instagram String?
  user      User    @relation("User_UserProfile_O2O", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@map("user_profiles")
}

model UserResetToken {
  userId    String   @unique
  token     String
  createdAt DateTime @default(now())
  user      User     @relation("User_UserResetToken_O2O", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@map("user_reset_tokens")
}

model UserArtistApplication {
  id          Int      @id @default(autoincrement())
  userId      String   @unique
  message     String?
  isApproved  Boolean?
  idProofType String?
  idProofKey  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("User_ArtistApplication_O2O", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@map("user_artist_applications")
}

model LikedTrack {
  userId    String
  trackId   String
  createdAt DateTime @default(now())
  track     Track    @relation("Track_LikedTracks_O2M", fields: [trackId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation("User_LikedTracks_O2M", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, trackId])
  @@index([userId, trackId])
  @@index([userId])
  @@map("liked_tracks")
}

model LikedPlaylist {
  userId     String
  playlistId String
  createdAt  DateTime @default(now())
  playlist   Playlist @relation("Playlist_LikedPlaylists_O2M", fields: [playlistId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User     @relation("User_LikedPlaylists_O2M", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, playlistId])
  @@index([userId, playlistId])
  @@index([userId])
  @@map("liked_playlists")
}

model PlaylistTrack {
  playlistId String
  trackId    String
  createdAt  DateTime @default(now())
  playlist   Playlist @relation("Playlist_PlaylistTracks_O2M", fields: [playlistId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  track      Track    @relation("Track_PlaylistTracks_O2M", fields: [trackId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([playlistId, trackId])
  @@index([playlistId, trackId])
  @@index([playlistId])
  @@map("playlist_tracks")
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    String
  tag       String
  message   String
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
  @@map("notifications")
}

enum Status {
  PENDING
  PROCESSING
  FAILED
  REVIEWING
  PUBLISHED
  BLOCKED
}
